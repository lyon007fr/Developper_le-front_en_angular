{"ast":null,"code":"import { of, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/services/olympic.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@swimlane/ngx-charts\";\nimport * as i4 from \"@angular/common\";\nexport class HomeComponent {\n  constructor(olympicService, router) {\n    this.olympicService = olympicService;\n    this.router = router;\n    this.olympics$ = of([]);\n    this.yearsOfJo = new Set();\n  }\n  //fonction pour renvoyer l'utilisateur vers la page contenant les infos du pays\n  onSelect(event) {\n    if (event) {\n      console.log('Chart clicked:', event);\n      this.router.navigateByUrl(`country/${event.label}`);\n    }\n  }\n  ngOnInit() {\n    //nombre de pays\n    this.olympics$ = this.olympicService.getOlympics();\n    //nombre de jo\n    this.olympics$.pipe(map(value => value.map(country => country.participations.forEach(participation => {\n      this.yearsOfJo.add(participation.year);\n    })))).subscribe();\n    //passer par le async\n    this.medal = this.olympicService.getMedalCount();\n    /* this.olympicService.getMedalCount().subscribe((data) => {\n     this.medal = data\n    })\n    */\n  }\n  static #_ = this.ɵfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.OlympicService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"app-home\"]],\n    decls: 9,\n    vars: 7,\n    consts: [[3, \"results\", \"legend\", \"labels\", \"select\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Olympic games app\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"hr\");\n        i0.ɵɵelementStart(3, \"p\");\n        i0.ɵɵtext(4);\n        i0.ɵɵpipe(5, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"p\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"ngx-charts-pie-chart\", 0);\n        i0.ɵɵlistener(\"select\", function HomeComponent_Template_ngx_charts_pie_chart_select_8_listener($event) {\n          return ctx.onSelect($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        let tmp_0_0;\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"Nombre de pays \", (tmp_0_0 = i0.ɵɵpipeBind1(5, 5, ctx.olympics$)) == null ? null : tmp_0_0.length, \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Nombre de JO \", ctx.yearsOfJo.size, \"\");\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"results\", ctx.medal)(\"legend\", true)(\"labels\", true);\n      }\n    },\n    dependencies: [i3.PieChartComponent, i4.AsyncPipe],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["of","map","HomeComponent","constructor","olympicService","router","olympics$","yearsOfJo","Set","onSelect","event","console","log","navigateByUrl","label","ngOnInit","getOlympics","pipe","value","country","participations","forEach","participation","add","year","subscribe","medal","getMedalCount","_","i0","ɵɵdirectiveInject","i1","OlympicService","i2","Router","_2","selectors","decls","vars","consts","template","HomeComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","HomeComponent_Template_ngx_charts_pie_chart_select_8_listener","$event","ɵɵadvance","ɵɵtextInterpolate1","tmp_0_0","ɵɵpipeBind1","length","size","ɵɵproperty"],"sources":["C:\\Users\\MBD7C62N\\Repo Git\\python\\Developpez-le-front-end-en-utilisant-Angular\\src\\app\\pages\\home\\home.component.ts","C:\\Users\\MBD7C62N\\Repo Git\\python\\Developpez-le-front-end-en-utilisant-Angular\\src\\app\\pages\\home\\home.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Observable, of,tap,map } from 'rxjs';\r\nimport { OlympicService } from 'app/core/services/olympic.service';\r\nimport { Olympic } from 'app/core/models/olympic';\r\nimport { MedalCount } from 'app/core/models/medal-count';\r\nimport { Router } from '@angular/router';\r\nimport { NgxChartsModule} from '@swimlane/ngx-charts';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  \r\n\r\n\r\n  public olympics$: Observable<Olympic[]> = of([]);\r\n  public medal!:Observable<MedalCount[]>;\r\n  public yearsOfJo : Set<number> = new Set<number>()\r\n \r\n  public numberCountry!:number\r\n  constructor(private olympicService: OlympicService, private router:Router) {};\r\n\r\n  //fonction pour renvoyer l'utilisateur vers la page contenant les infos du pays\r\n  onSelect(event: any): void {\r\n    if (event) { \r\n      console.log('Chart clicked:', event);\r\n      this.router.navigateByUrl(`country/${event.label}`)\r\n    }\r\n  }\r\n  \r\n  \r\n\r\n  ngOnInit(): void {\r\n\r\n    //nombre de pays\r\n    this.olympics$ = this.olympicService.getOlympics();\r\n\r\n    //nombre de jo\r\n    this.olympics$.pipe(\r\n      map(value => value.map(\r\n        country => country.participations.forEach(participation => {\r\n          this.yearsOfJo.add(participation.year)\r\n        }))\r\n        )\r\n        ).subscribe()\r\n  \r\n   \r\n\r\n   //passer par le async\r\n   this.medal = this.olympicService.getMedalCount()\r\n   /* this.olympicService.getMedalCount().subscribe((data) => {\r\n    this.medal = data\r\n   })\r\n */\r\n  \r\n   \r\n   \r\n\r\n  }\r\n}\r\n","<h2>Olympic games app</h2>\r\n<hr />\r\n<p>Nombre de pays {{ (olympics$ | async)?.length }}</p>\r\n<p>Nombre de JO {{yearsOfJo.size}}</p>\r\n\r\n\r\n\r\n<ngx-charts-pie-chart \r\n    [results]=\"medal\"\r\n    [legend]=\"true\"\r\n    [labels]=\"true\"\r\n    (select)=\"onSelect($event)\"\r\n></ngx-charts-pie-chart>"],"mappings":"AACA,SAAqBA,EAAE,EAAKC,GAAG,QAAQ,MAAM;;;;;;AAc7C,OAAM,MAAOC,aAAa;EASxBC,YAAoBC,cAA8B,EAAUC,MAAa;IAArD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;IAL3D,KAAAC,SAAS,GAA0BN,EAAE,CAAC,EAAE,CAAC;IAEzC,KAAAO,SAAS,GAAiB,IAAIC,GAAG,EAAU;EAG0B;EAE5E;EACAC,QAAQA,CAACC,KAAU;IACjB,IAAIA,KAAK,EAAE;MACTC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAAC;MACpC,IAAI,CAACL,MAAM,CAACQ,aAAa,CAAC,WAAWH,KAAK,CAACI,KAAK,EAAE,CAAC;IACrD;EACF;EAIAC,QAAQA,CAAA;IAEN;IACA,IAAI,CAACT,SAAS,GAAG,IAAI,CAACF,cAAc,CAACY,WAAW,EAAE;IAElD;IACA,IAAI,CAACV,SAAS,CAACW,IAAI,CACjBhB,GAAG,CAACiB,KAAK,IAAIA,KAAK,CAACjB,GAAG,CACpBkB,OAAO,IAAIA,OAAO,CAACC,cAAc,CAACC,OAAO,CAACC,aAAa,IAAG;MACxD,IAAI,CAACf,SAAS,CAACgB,GAAG,CAACD,aAAa,CAACE,IAAI,CAAC;IACxC,CAAC,CAAC,CAAC,CACF,CACA,CAACC,SAAS,EAAE;IAIlB;IACA,IAAI,CAACC,KAAK,GAAG,IAAI,CAACtB,cAAc,CAACuB,aAAa,EAAE;IAChD;;;;EAQD;EAAC,QAAAC,CAAA,G;qBA/CU1B,aAAa,EAAA2B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAbjC,aAAa;IAAAkC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,uBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCf1Bb,EAAA,CAAAe,cAAA,SAAI;QAAAf,EAAA,CAAAgB,MAAA,wBAAiB;QAAAhB,EAAA,CAAAiB,YAAA,EAAK;QAC1BjB,EAAA,CAAAkB,SAAA,SAAM;QACNlB,EAAA,CAAAe,cAAA,QAAG;QAAAf,EAAA,CAAAgB,MAAA,GAAgD;;QAAAhB,EAAA,CAAAiB,YAAA,EAAI;QACvDjB,EAAA,CAAAe,cAAA,QAAG;QAAAf,EAAA,CAAAgB,MAAA,GAA+B;QAAAhB,EAAA,CAAAiB,YAAA,EAAI;QAItCjB,EAAA,CAAAe,cAAA,8BAKC;QADGf,EAAA,CAAAmB,UAAA,oBAAAC,8DAAAC,MAAA;UAAA,OAAUP,GAAA,CAAAlC,QAAA,CAAAyC,MAAA,CAAgB;QAAA,EAAC;QAC9BrB,EAAA,CAAAiB,YAAA,EAAuB;;;;QAVrBjB,EAAA,CAAAsB,SAAA,GAAgD;QAAhDtB,EAAA,CAAAuB,kBAAA,qBAAAC,OAAA,GAAAxB,EAAA,CAAAyB,WAAA,OAAAX,GAAA,CAAArC,SAAA,oBAAA+C,OAAA,CAAAE,MAAA,KAAgD;QAChD1B,EAAA,CAAAsB,SAAA,GAA+B;QAA/BtB,EAAA,CAAAuB,kBAAA,kBAAAT,GAAA,CAAApC,SAAA,CAAAiD,IAAA,KAA+B;QAK9B3B,EAAA,CAAAsB,SAAA,EAAiB;QAAjBtB,EAAA,CAAA4B,UAAA,YAAAd,GAAA,CAAAjB,KAAA,CAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}