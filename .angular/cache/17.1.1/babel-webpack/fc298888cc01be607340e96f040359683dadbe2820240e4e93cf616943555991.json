{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OlympicService {\n  constructor(http) {\n    this.http = http;\n    this.olympicUrl = './assets/mock/olympic.json';\n    this.olympics$ = new BehaviorSubject([]);\n    this.MedalCountByCountry = new BehaviorSubject([]);\n  }\n  loadInitialData() {\n    return this.http.get(this.olympicUrl).pipe(tap(value => this.olympics$.next(value)), tap(value => this.MedalCountByCountry.next(this.getObjectMedal(value))), catchError((error, caught) => {\n      // TODO: improve error handling\n      console.error(error);\n      // can be useful to end loading state and let the user know something went wrong\n      this.olympics$.next([]);\n      return caught;\n    }));\n  }\n  getOlympics() {\n    return this.olympics$.asObservable();\n  }\n  getMedalCount() {\n    return this.MedalCountByCountry.asObservable();\n  }\n  getObjectMedal(olympic) {\n    let medalCounts = [];\n    for (let country in olympic) {\n      let totalMedalByCountry = 0;\n      let totalByCountry = {\n        countryName: '',\n        totalMedal: 0\n      };\n      totalMedalByCountry = olympic[country].participations.reduce((acc, item) => acc + item.medalsCount, 0);\n      totalByCountry.countryName = olympic[country].country;\n      totalByCountry.totalMedal = totalMedalByCountry;\n      medalCounts.push(totalByCountry);\n    }\n    // Mettre à jour MedalCountByCountry avec les résultats\n    return medalCounts;\n  }\n  static #_ = this.ɵfac = function OlympicService_Factory(t) {\n    return new (t || OlympicService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OlympicService,\n    factory: OlympicService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","catchError","tap","OlympicService","constructor","http","olympicUrl","olympics$","MedalCountByCountry","loadInitialData","get","pipe","value","next","getObjectMedal","error","caught","console","getOlympics","asObservable","getMedalCount","olympic","medalCounts","country","totalMedalByCountry","totalByCountry","countryName","totalMedal","participations","reduce","acc","item","medalsCount","push","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MBD7C62N\\Repo Git\\python\\Developpez-le-front-end-en-utilisant-Angular\\src\\app\\core\\services\\olympic.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { Olympic } from '../models/olympic';\r\nimport { MedalCount } from '../models/medal-count';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OlympicService {\r\n  private olympicUrl = './assets/mock/olympic.json';\r\n  private olympics$ = new BehaviorSubject<Olympic[]>([]);\r\n  private MedalCountByCountry = new BehaviorSubject<MedalCount[]>([]);\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  loadInitialData(): Observable<Olympic[]> {\r\n    return this.http.get<any>(this.olympicUrl).pipe(\r\n      tap((value) => this.olympics$.next(value)),\r\n      tap((value) => this.MedalCountByCountry.next(this.getObjectMedal(value))),\r\n      catchError((error, caught) => {\r\n        // TODO: improve error handling\r\n        console.error(error);\r\n        // can be useful to end loading state and let the user know something went wrong\r\n        this.olympics$.next([]);\r\n        return caught;\r\n      })\r\n    );\r\n  }\r\n\r\n  getOlympics() {\r\n    return this.olympics$.asObservable();\r\n  }\r\n\r\ngetMedalCount(){\r\n  return this.MedalCountByCountry.asObservable()\r\n\r\n}\r\n\r\n\r\n    getObjectMedal(olympic: Olympic[]) {\r\n      let medalCounts : MedalCount[] = [];\r\n      \r\n      for (let country in olympic) {\r\n        let totalMedalByCountry = 0;\r\n        let totalByCountry: MedalCount = {countryName: '',\r\n                          totalMedal: 0};\r\n      \r\n        totalMedalByCountry = olympic[country].participations.reduce((acc, item) => acc + item.medalsCount, 0);\r\n        totalByCountry.countryName = olympic[country].country;\r\n        totalByCountry.totalMedal = totalMedalByCountry;\r\n      \r\n        medalCounts.push(totalByCountry);\r\n      }\r\n    \r\n      // Mettre à jour MedalCountByCountry avec les résultats\r\n      return medalCounts;\r\n\r\n}\r\n\r\n}\r\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAQhD,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,UAAU,GAAG,4BAA4B;IACzC,KAAAC,SAAS,GAAG,IAAIP,eAAe,CAAY,EAAE,CAAC;IAC9C,KAAAQ,mBAAmB,GAAG,IAAIR,eAAe,CAAe,EAAE,CAAC;EAE5B;EAEvCS,eAAeA,CAAA;IACb,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAM,IAAI,CAACJ,UAAU,CAAC,CAACK,IAAI,CAC7CT,GAAG,CAAEU,KAAK,IAAK,IAAI,CAACL,SAAS,CAACM,IAAI,CAACD,KAAK,CAAC,CAAC,EAC1CV,GAAG,CAAEU,KAAK,IAAK,IAAI,CAACJ,mBAAmB,CAACK,IAAI,CAAC,IAAI,CAACC,cAAc,CAACF,KAAK,CAAC,CAAC,CAAC,EACzEX,UAAU,CAAC,CAACc,KAAK,EAAEC,MAAM,KAAI;MAC3B;MACAC,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;MACpB;MACA,IAAI,CAACR,SAAS,CAACM,IAAI,CAAC,EAAE,CAAC;MACvB,OAAOG,MAAM;IACf,CAAC,CAAC,CACH;EACH;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACX,SAAS,CAACY,YAAY,EAAE;EACtC;EAEFC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACZ,mBAAmB,CAACW,YAAY,EAAE;EAEhD;EAGIL,cAAcA,CAACO,OAAkB;IAC/B,IAAIC,WAAW,GAAkB,EAAE;IAEnC,KAAK,IAAIC,OAAO,IAAIF,OAAO,EAAE;MAC3B,IAAIG,mBAAmB,GAAG,CAAC;MAC3B,IAAIC,cAAc,GAAe;QAACC,WAAW,EAAE,EAAE;QAC/BC,UAAU,EAAE;MAAC,CAAC;MAEhCH,mBAAmB,GAAGH,OAAO,CAACE,OAAO,CAAC,CAACK,cAAc,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,WAAW,EAAE,CAAC,CAAC;MACtGP,cAAc,CAACC,WAAW,GAAGL,OAAO,CAACE,OAAO,CAAC,CAACA,OAAO;MACrDE,cAAc,CAACE,UAAU,GAAGH,mBAAmB;MAE/CF,WAAW,CAACW,IAAI,CAACR,cAAc,CAAC;IAClC;IAEA;IACA,OAAOH,WAAW;EAExB;EAAC,QAAAY,CAAA,G;qBAjDY/B,cAAc,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdpC,cAAc;IAAAqC,OAAA,EAAdrC,cAAc,CAAAsC,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}