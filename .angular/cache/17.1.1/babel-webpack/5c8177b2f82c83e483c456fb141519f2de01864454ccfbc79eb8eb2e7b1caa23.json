{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OlympicService {\n  constructor(http) {\n    this.http = http;\n    this.olympicUrl = './assets/mock/olympic.json';\n    this.olympics$ = new BehaviorSubject([]);\n    this.MedalCountByCountry = new BehaviorSubject([]);\n    this.numberOfJO = new BehaviorSubject(0);\n  }\n  loadInitialData() {\n    return this.http.get(this.olympicUrl).pipe(tap(value => {\n      this.olympics$.next(value);\n      //this.numberOfJO.next(value.length);\n      this.MedalCountByCountry.next(this.getObjectMedal(value));\n    }), catchError((error, caught) => {\n      // TODO: improve error handling\n      console.error(error);\n      // can be useful to end loading state and let the user know something went wrong\n      this.olympics$.next([]);\n      return caught;\n    }));\n  }\n  getOlympics() {\n    return this.olympics$.asObservable();\n  }\n  //   getNumberOfJos():Observable<number>{\n  //     return this.numberOfJO.asObservable()\n  // }\n  getMedalCount() {\n    return this.MedalCountByCountry.asObservable();\n  }\n  /*\n  *Calcule le nombre total de médailles pour chaque pays dans les Jeux Olympiques.\n  *@param :{Olympic[]} olympic - La liste des données olympiques.\n  *@return : {MedalCount[]}: un tableau d'objet representant le compte des médailles de chaque pays\n  */\n  getObjectMedal(olympic) {\n    let medalCounts = [];\n    for (let country in olympic) {\n      let totalMedalByCountry = 0;\n      let totalByCountry = {\n        name: '',\n        value: 0\n      };\n      totalMedalByCountry = olympic[country].participations.reduce((acc, item) => acc + item.medalsCount, 0);\n      totalByCountry.name = olympic[country].country;\n      totalByCountry.value = totalMedalByCountry;\n      medalCounts.push(totalByCountry);\n    }\n    return medalCounts;\n  }\n  getDataByCountry(country) {\n    return this.http.get(this.olympicUrl).pipe(tap(value => console.log(value)),\n    //ajouter une gestion d'erreur\n    map(data => data.filter(item => item.country === country)));\n  }\n  static #_ = this.ɵfac = function OlympicService_Factory(t) {\n    return new (t || OlympicService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OlympicService,\n    factory: OlympicService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","catchError","tap","map","OlympicService","constructor","http","olympicUrl","olympics$","MedalCountByCountry","numberOfJO","loadInitialData","get","pipe","value","next","getObjectMedal","error","caught","console","getOlympics","asObservable","getMedalCount","olympic","medalCounts","country","totalMedalByCountry","totalByCountry","name","participations","reduce","acc","item","medalsCount","push","getDataByCountry","log","data","filter","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MBD7C62N\\Repo Git\\python\\Developpez-le-front-end-en-utilisant-Angular\\src\\app\\core\\services\\olympic.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\nimport { Olympic } from '../models/olympic';\r\nimport { MedalCount } from '../models/medal-count';\r\nimport { Participation } from '../models/participation';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OlympicService {\r\n  private olympicUrl = './assets/mock/olympic.json';\r\n  private olympics$ = new BehaviorSubject<Olympic[]>([]);\r\n  private MedalCountByCountry = new BehaviorSubject<MedalCount[]>([]);\r\n  private numberOfJO = new BehaviorSubject<number>(0)\r\n  \r\n\r\n  \r\n  constructor(private http: HttpClient) {}\r\n\r\n  \r\n  loadInitialData(): Observable<Olympic[]> {\r\n    return this.http.get<Olympic[]>(this.olympicUrl).pipe(\r\n      tap((value) => {\r\n        this.olympics$.next(value);\r\n        //this.numberOfJO.next(value.length);\r\n        this.MedalCountByCountry.next(this.getObjectMedal(value));\r\n      }),\r\n      \r\n      catchError((error, caught) => {\r\n        // TODO: improve error handling\r\n        console.error(error);\r\n        // can be useful to end loading state and let the user know something went wrong\r\n        this.olympics$.next([]);\r\n        return caught;\r\n      })\r\n    );\r\n  }\r\n\r\n  getOlympics():Observable<Olympic[]> {\r\n    return this.olympics$.asObservable();\r\n  }\r\n\r\n//   getNumberOfJos():Observable<number>{\r\n//     return this.numberOfJO.asObservable()\r\n// }\r\n\r\n  getMedalCount():Observable<MedalCount[]>{\r\n    return this.MedalCountByCountry.asObservable()\r\n  }\r\n\r\n  /*\r\n  *Calcule le nombre total de médailles pour chaque pays dans les Jeux Olympiques.\r\n  *@param :{Olympic[]} olympic - La liste des données olympiques.\r\n  *@return : {MedalCount[]}: un tableau d'objet representant le compte des médailles de chaque pays\r\n  */\r\n  getObjectMedal(olympic: Olympic[]):MedalCount[] {\r\n      let medalCounts : MedalCount[] = [];\r\n      for (let country in olympic) {\r\n        let totalMedalByCountry = 0;\r\n        let totalByCountry: MedalCount = {name: '',\r\n                          value: 0};\r\n        totalMedalByCountry = olympic[country].participations.reduce((acc, item) => acc + item.medalsCount, 0);\r\n        totalByCountry.name = olympic[country].country;\r\n        totalByCountry.value = totalMedalByCountry;\r\n        medalCounts.push(totalByCountry);\r\n      }\r\n      return medalCounts;\r\n\r\n}\r\n  getDataByCountry(country: string): Observable<Olympic[]> {\r\n    return this.http.get<Olympic[]>(this.olympicUrl).pipe(tap(value =>console.log(value)),//ajouter une gestion d'erreur\r\n      map(data => data.filter(item => item.country === country))\r\n    );\r\n  }\r\n\r\n\r\n\r\n  \r\n  \r\n}\r\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,UAAU,EAAEC,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;;;AAUrD,OAAM,MAAOC,cAAc;EAQzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPhB,KAAAC,UAAU,GAAG,4BAA4B;IACzC,KAAAC,SAAS,GAAG,IAAIR,eAAe,CAAY,EAAE,CAAC;IAC9C,KAAAS,mBAAmB,GAAG,IAAIT,eAAe,CAAe,EAAE,CAAC;IAC3D,KAAAU,UAAU,GAAG,IAAIV,eAAe,CAAS,CAAC,CAAC;EAIZ;EAGvCW,eAAeA,CAAA;IACb,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAY,IAAI,CAACL,UAAU,CAAC,CAACM,IAAI,CACnDX,GAAG,CAAEY,KAAK,IAAI;MACZ,IAAI,CAACN,SAAS,CAACO,IAAI,CAACD,KAAK,CAAC;MAC1B;MACA,IAAI,CAACL,mBAAmB,CAACM,IAAI,CAAC,IAAI,CAACC,cAAc,CAACF,KAAK,CAAC,CAAC;IAC3D,CAAC,CAAC,EAEFb,UAAU,CAAC,CAACgB,KAAK,EAAEC,MAAM,KAAI;MAC3B;MACAC,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;MACpB;MACA,IAAI,CAACT,SAAS,CAACO,IAAI,CAAC,EAAE,CAAC;MACvB,OAAOG,MAAM;IACf,CAAC,CAAC,CACH;EACH;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACZ,SAAS,CAACa,YAAY,EAAE;EACtC;EAEF;EACA;EACA;EAEEC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACb,mBAAmB,CAACY,YAAY,EAAE;EAChD;EAEA;;;;;EAKAL,cAAcA,CAACO,OAAkB;IAC7B,IAAIC,WAAW,GAAkB,EAAE;IACnC,KAAK,IAAIC,OAAO,IAAIF,OAAO,EAAE;MAC3B,IAAIG,mBAAmB,GAAG,CAAC;MAC3B,IAAIC,cAAc,GAAe;QAACC,IAAI,EAAE,EAAE;QACxBd,KAAK,EAAE;MAAC,CAAC;MAC3BY,mBAAmB,GAAGH,OAAO,CAACE,OAAO,CAAC,CAACI,cAAc,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,WAAW,EAAE,CAAC,CAAC;MACtGN,cAAc,CAACC,IAAI,GAAGL,OAAO,CAACE,OAAO,CAAC,CAACA,OAAO;MAC9CE,cAAc,CAACb,KAAK,GAAGY,mBAAmB;MAC1CF,WAAW,CAACU,IAAI,CAACP,cAAc,CAAC;IAClC;IACA,OAAOH,WAAW;EAExB;EACEW,gBAAgBA,CAACV,OAAe;IAC9B,OAAO,IAAI,CAACnB,IAAI,CAACM,GAAG,CAAY,IAAI,CAACL,UAAU,CAAC,CAACM,IAAI,CAACX,GAAG,CAACY,KAAK,IAAGK,OAAO,CAACiB,GAAG,CAACtB,KAAK,CAAC,CAAC;IAAC;IACpFX,GAAG,CAACkC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACP,OAAO,KAAKA,OAAO,CAAC,CAAC,CAC3D;EACH;EAAC,QAAAc,CAAA,G;qBAhEUnC,cAAc,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdxC,cAAc;IAAAyC,OAAA,EAAdzC,cAAc,CAAA0C,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}