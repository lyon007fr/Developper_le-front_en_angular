{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"app/core/services/olympic.service\";\nexport class CountryComponent {\n  constructor(route, olympicService) {\n    this.route = route;\n    this.olympicService = olympicService;\n  }\n  ngOnInit() {\n    //recuperation de l'info dans l'url\n    const countryLabel = this.route.snapshot.params['country'];\n    //recuperation de l'objet contenant les infos du pays\n    /*     this.olympicService.getOlympics().pipe(tap\n          (data => {this.countryInfo = data.find (value => value.country = countryLabel)})).subscribe()\n     */\n    this.olympicService.getDataByCountry(countryLabel).pipe(map(value => this.chartData = value[0].participations.map(participation => {\n      return {\n        name: participation.year,\n        value: participation.medalsCount\n      };\n    }))).subscribe(value => console.log(value));\n  }\n  static #_ = this.ɵfac = function CountryComponent_Factory(t) {\n    return new (t || CountryComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.OlympicService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CountryComponent,\n    selectors: [[\"app-country\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 6,\n    vars: 14,\n    consts: [[2, \"display\", \"block\"], [3, \"view\", \"scheme\", \"results\", \"gradient\", \"xAxis\", \"yAxis\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxisLabel\", \"yAxisLabel\", \"autoScale\"]],\n    template: function CountryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"p\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 0);\n        i0.ɵɵelement(5, \"ngx-charts-line-chart\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance();\n        i0.ɵɵtextInterpolate1(\"country works! \", ctx.countryInfo == null ? null : ctx.countryInfo.participations, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.chartData);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"view\", ctx.view)(\"scheme\", ctx.colorScheme)(\"results\", ctx.chartData)(\"gradient\", ctx.gradient)(\"xAxis\", ctx.showXAxis)(\"yAxis\", ctx.showYAxis)(\"legend\", ctx.showLegend)(\"showXAxisLabel\", ctx.showXAxisLabel)(\"showYAxisLabel\", ctx.showYAxisLabel)(\"xAxisLabel\", ctx.xAxisLabel)(\"yAxisLabel\", ctx.yAxisLabel)(\"autoScale\", ctx.autoScale);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["map","CountryComponent","constructor","route","olympicService","ngOnInit","countryLabel","snapshot","params","getDataByCountry","pipe","value","chartData","participations","participation","name","year","medalsCount","subscribe","console","log","_","i0","ɵɵdirectiveInject","i1","ActivatedRoute","i2","OlympicService","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","CountryComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate1","countryInfo","ɵɵtextInterpolate","ɵɵproperty","view","colorScheme","gradient","showXAxis","showYAxis","showLegend","showXAxisLabel","showYAxisLabel","xAxisLabel","yAxisLabel","autoScale"],"sources":["C:\\Users\\MBD7C62N\\Repo Git\\python\\Developpez-le-front-end-en-utilisant-Angular\\src\\app\\country\\country.component.ts","C:\\Users\\MBD7C62N\\Repo Git\\python\\Developpez-le-front-end-en-utilisant-Angular\\src\\app\\country\\country.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, OutletContext } from '@angular/router';\r\nimport { Olympic } from 'app/core/models/olympic';\r\nimport { OlympicService } from 'app/core/services/olympic.service';\r\nimport { valueOrDefault } from 'chart.js/dist/helpers/helpers.core';\r\nimport { filter, map, tap } from 'rxjs';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\n\r\n\r\n@Component({\r\n  selector: 'app-country',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './country.component.html',\r\n  styleUrl: './country.component.scss'\r\n})\r\nexport class CountryComponent implements OnInit{\r\n\r\n  public countryInfo!: Olympic | undefined\r\n  public chartData!: {}\r\n\r\n  constructor(private route: ActivatedRoute,\r\n              private olympicService: OlympicService) {}\r\n\r\n\r\n  ngOnInit(): void {\r\n      \r\n    //recuperation de l'info dans l'url\r\n    const countryLabel = this.route.snapshot.params['country']\r\n\r\n    //recuperation de l'objet contenant les infos du pays\r\n\r\n/*     this.olympicService.getOlympics().pipe(tap\r\n      (data => {this.countryInfo = data.find (value => value.country = countryLabel)})).subscribe()\r\n */\r\n      this.olympicService.getDataByCountry(countryLabel).pipe(map(value => this.chartData = value[0].participations.map(participation => {return {\r\n        name:participation.year,\r\n        value:participation.medalsCount}\r\n      }))).subscribe(value =>console.log(value))\r\n    \r\n\r\n  \r\n  }\r\n\r\n}\r\n","<p>country works! {{countryInfo?.participations}}</p>\r\n\r\n<p>{{chartData}}</p>\r\n\r\n<div style=\"display: block;\">\r\n  <ngx-charts-line-chart\r\n    [view]=\"view\"\r\n    [scheme]=\"colorScheme\"\r\n    [results]=\"chartData\"\r\n    [gradient]=\"gradient\"\r\n    [xAxis]=\"showXAxis\"\r\n    [yAxis]=\"showYAxis\"\r\n    [legend]=\"showLegend\"\r\n    [showXAxisLabel]=\"showXAxisLabel\"\r\n    [showYAxisLabel]=\"showYAxisLabel\"\r\n    [xAxisLabel]=\"xAxisLabel\"\r\n    [yAxisLabel]=\"yAxisLabel\"\r\n    [autoScale]=\"autoScale\">\r\n  </ngx-charts-line-chart>\r\n</div>"],"mappings":"AAKA,SAAiBA,GAAG,QAAa,MAAM;;;;AAWvC,OAAM,MAAOC,gBAAgB;EAK3BC,YAAoBC,KAAqB,EACrBC,cAA8B;IAD9B,KAAAD,KAAK,GAALA,KAAK;IACL,KAAAC,cAAc,GAAdA,cAAc;EAAmB;EAGrDC,QAAQA,CAAA;IAEN;IACA,MAAMC,YAAY,GAAG,IAAI,CAACH,KAAK,CAACI,QAAQ,CAACC,MAAM,CAAC,SAAS,CAAC;IAE1D;IAEJ;;;IAGM,IAAI,CAACJ,cAAc,CAACK,gBAAgB,CAACH,YAAY,CAAC,CAACI,IAAI,CAACV,GAAG,CAACW,KAAK,IAAI,IAAI,CAACC,SAAS,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACE,cAAc,CAACb,GAAG,CAACc,aAAa,IAAG;MAAE,OAAO;QACzIC,IAAI,EAACD,aAAa,CAACE,IAAI;QACvBL,KAAK,EAACG,aAAa,CAACG;OAAY;IAClC,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS,CAACP,KAAK,IAAGQ,OAAO,CAACC,GAAG,CAACT,KAAK,CAAC,CAAC;EAI9C;EAAC,QAAAU,CAAA,G;qBA1BUpB,gBAAgB,EAAAqB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAhB3B,gBAAgB;IAAA4B,SAAA;IAAAC,UAAA;IAAAC,QAAA,GAAAT,EAAA,CAAAU,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QChB7BhB,EAAA,CAAAkB,cAAA,QAAG;QAAAlB,EAAA,CAAAmB,MAAA,GAA8C;QAAAnB,EAAA,CAAAoB,YAAA,EAAI;QAErDpB,EAAA,CAAAkB,cAAA,QAAG;QAAAlB,EAAA,CAAAmB,MAAA,GAAa;QAAAnB,EAAA,CAAAoB,YAAA,EAAI;QAEpBpB,EAAA,CAAAkB,cAAA,aAA6B;QAC3BlB,EAAA,CAAAqB,SAAA,+BAawB;QAC1BrB,EAAA,CAAAoB,YAAA,EAAM;;;QAnBHpB,EAAA,CAAAsB,SAAA,EAA8C;QAA9CtB,EAAA,CAAAuB,kBAAA,oBAAAN,GAAA,CAAAO,WAAA,kBAAAP,GAAA,CAAAO,WAAA,CAAAjC,cAAA,KAA8C;QAE9CS,EAAA,CAAAsB,SAAA,GAAa;QAAbtB,EAAA,CAAAyB,iBAAA,CAAAR,GAAA,CAAA3B,SAAA,CAAa;QAIZU,EAAA,CAAAsB,SAAA,GAAa;QAAbtB,EAAA,CAAA0B,UAAA,SAAAT,GAAA,CAAAU,IAAA,CAAa,WAAAV,GAAA,CAAAW,WAAA,aAAAX,GAAA,CAAA3B,SAAA,cAAA2B,GAAA,CAAAY,QAAA,WAAAZ,GAAA,CAAAa,SAAA,WAAAb,GAAA,CAAAc,SAAA,YAAAd,GAAA,CAAAe,UAAA,oBAAAf,GAAA,CAAAgB,cAAA,oBAAAhB,GAAA,CAAAiB,cAAA,gBAAAjB,GAAA,CAAAkB,UAAA,gBAAAlB,GAAA,CAAAmB,UAAA,eAAAnB,GAAA,CAAAoB,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}