{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"app/core/services/olympic.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@swimlane/ngx-charts\";\nconst _c0 = () => [700, 300];\nfunction CountryComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 1);\n    i0.ɵɵtext(8, \" Go Back\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"ngx-charts-line-chart\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Number of entrie \", ctx_r0.numberOfEntries, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"total number medal \", ctx_r0.totalMedalsCount, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"total number of athlete \", ctx_r0.totalAthleteCount, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction0(13, _c0))(\"legend\", ctx_r0.legend)(\"showXAxisLabel\", ctx_r0.showXAxisLabel)(\"showYAxisLabel\", ctx_r0.showYAxisLabel)(\"xAxis\", ctx_r0.xAxis)(\"yAxis\", ctx_r0.yAxis)(\"xAxisLabel\", ctx_r0.xAxisLabel)(\"yAxisLabel\", ctx_r0.yAxisLabel)(\"timeline\", ctx_r0.timeline)(\"results\", ctx_r0.chartData);\n  }\n}\nexport class CountryComponent {\n  constructor(route, olympicService, router) {\n    this.route = route;\n    this.olympicService = olympicService;\n    this.router = router;\n    this.chartData = [];\n    this.totalMedalsCount = 0; // Propriété pour stocker le nombre total de médailles\n    this.totalAthleteCount = 0; // Propriété pour stocker le nombre total d'athlètes\n    //chartConf\n    this.legend = true;\n    this.showLabels = true;\n    this.animations = true;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.showYAxisLabel = true;\n    this.showXAxisLabel = true;\n    this.xAxisLabel = 'Year';\n    this.yAxisLabel = 'Population';\n    this.timeline = true;\n    this.colorScheme = {\n      domain: ['#5AA454', '#E44D25', '#CFC0BB', '#7aa3e5', '#a8385d', '#aae3f5']\n    };\n  }\n  ngOnInit() {\n    //recuperation de l'info dans l'url\n    const countryLabel = this.route.snapshot.params['country']; //.charAt(0).toUpperCase() + this.route.snapshot.params['country'].slice(1)\n    //console.log(countryLabel)\n    //recuperation de l'objet contenant les infos du pays\n    /*    this.olympicService.getDataByCountry(countryLabel).pipe(tap(value => value.forEach(participation => this.numberOfEntries = participation.participations.length)),\n       map(value => this.chartData.push({name:countryLabel,series:value[0].participations.map(value => {\n        return{\n          name: value.year.toString(),\n        value: value.medalsCount,\n        }\n       })\n      })\n       ))\n       .subscribe()\n    }\n    */\n    //const countryLabel = this.route.snapshot.params['country'];\n    this.olympicService.getDataByCountry(countryLabel).subscribe(data => {\n      this.countryInfo = data[0]; // Supposons qu'un seul objet est retourné pour le pays\n      this.numberOfEntries = this.countryInfo.participations.length;\n      // Calculer le nombre total de médailles et d'athlètes\n      this.totalMedalsCount = this.countryInfo.participations.reduce((total, participation) => total + participation.medalsCount, 0);\n      this.totalAthleteCount = this.countryInfo.participations.reduce((total, participation) => total + participation.athleteCount, 0);\n      // Préparer les données pour le graphique\n      this.chartData = [{\n        name: countryLabel,\n        series: this.countryInfo.participations.map(participation => ({\n          name: participation.year.toString(),\n          value: participation.medalsCount\n        }))\n      }];\n    });\n  }\n  static #_ = this.ɵfac = function CountryComponent_Factory(t) {\n    return new (t || CountryComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.OlympicService), i0.ɵɵdirectiveInject(i1.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CountryComponent,\n    selectors: [[\"app-country\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"routerLink\", \"\"], [3, \"view\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxis\", \"yAxis\", \"xAxisLabel\", \"yAxisLabel\", \"timeline\", \"results\"]],\n    template: function CountryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CountryComponent_div_0_Template, 10, 14, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.chartData[0]);\n      }\n    },\n    dependencies: [i3.NgIf, i1.RouterLink, i4.LineChartComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","numberOfEntries","totalMedalsCount","totalAthleteCount","ɵɵproperty","ɵɵpureFunction0","_c0","legend","showXAxisLabel","showYAxisLabel","xAxis","yAxis","xAxisLabel","yAxisLabel","timeline","chartData","CountryComponent","constructor","route","olympicService","router","showLabels","animations","colorScheme","domain","ngOnInit","countryLabel","snapshot","params","getDataByCountry","subscribe","data","countryInfo","participations","length","reduce","total","participation","medalsCount","athleteCount","name","series","map","year","toString","value","_","ɵɵdirectiveInject","i1","ActivatedRoute","i2","OlympicService","Router","_2","selectors","decls","vars","consts","template","CountryComponent_Template","rf","ctx","ɵɵtemplate","CountryComponent_div_0_Template"],"sources":["C:\\Users\\MBD7C62N\\Repo Git\\python\\Developpez-le-front-end-en-utilisant-Angular\\src\\app\\country\\country.component.ts","C:\\Users\\MBD7C62N\\Repo Git\\python\\Developpez-le-front-end-en-utilisant-Angular\\src\\app\\country\\country.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, OutletContext, Router } from '@angular/router';\r\nimport { Olympic } from 'app/core/models/olympic';\r\nimport { OlympicService } from 'app/core/services/olympic.service';\r\nimport { Observable, filter, map, tap } from 'rxjs';\r\nimport { NgxChartsModule} from '@swimlane/ngx-charts';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n\r\n@Component({\r\n  selector: 'app-country',\r\n  templateUrl: './country.component.html',\r\n  styleUrl: './country.component.scss'\r\n})\r\nexport class CountryComponent implements OnInit{\r\n\r\n  public countryInfo!: Olympic | undefined\r\n  public chartData: {\"name\":string, \"series\":{}[]}[] = []\r\n  public numberOfEntries !: number\r\n\r\n  public totalMedalsCount: number = 0; // Propriété pour stocker le nombre total de médailles\r\n  public totalAthleteCount: number = 0; // Propriété pour stocker le nombre total d'athlètes\r\n\r\n  constructor(private route: ActivatedRoute,\r\n              private olympicService: OlympicService,\r\n              private router: Router) {}\r\n\r\n\r\n  //chartConf\r\n  legend: boolean = true;\r\n  showLabels: boolean = true;\r\n  animations: boolean = true;\r\n  xAxis: boolean = true;\r\n  yAxis: boolean = true;\r\n  showYAxisLabel: boolean = true;\r\n  showXAxisLabel: boolean = true;\r\n  xAxisLabel: string = 'Year';\r\n  yAxisLabel: string = 'Population';\r\n  timeline: boolean = true;\r\n  colorScheme = {\r\n    domain: ['#5AA454', '#E44D25', '#CFC0BB', '#7aa3e5', '#a8385d', '#aae3f5']\r\n  };\r\n\r\n  ngOnInit(): void {\r\n      \r\n    //recuperation de l'info dans l'url\r\n    const countryLabel = this.route.snapshot.params['country']//.charAt(0).toUpperCase() + this.route.snapshot.params['country'].slice(1)\r\n    //console.log(countryLabel)\r\n    \r\n    \r\n    \r\n\r\n    //recuperation de l'objet contenant les infos du pays\r\n    /*    this.olympicService.getDataByCountry(countryLabel).pipe(tap(value => value.forEach(participation => this.numberOfEntries = participation.participations.length)),\r\n       map(value => this.chartData.push({name:countryLabel,series:value[0].participations.map(value => {\r\n        return{\r\n          name: value.year.toString(),\r\n        value: value.medalsCount,\r\n        }\r\n       })\r\n      })\r\n       ))\r\n       .subscribe()\r\n  }\r\n */\r\n  //const countryLabel = this.route.snapshot.params['country'];\r\n\r\n    this.olympicService.getDataByCountry(countryLabel).subscribe(data => {\r\n      this.countryInfo = data[0]; // Supposons qu'un seul objet est retourné pour le pays\r\n      this.numberOfEntries = this.countryInfo.participations.length;\r\n\r\n      // Calculer le nombre total de médailles et d'athlètes\r\n      this.totalMedalsCount = this.countryInfo.participations.reduce((total, participation) => total + participation.medalsCount, 0);\r\n      this.totalAthleteCount = this.countryInfo.participations.reduce((total, participation) => total + participation.athleteCount, 0);\r\n\r\n      // Préparer les données pour le graphique\r\n      this.chartData = [{\r\n        name: countryLabel,\r\n        series: this.countryInfo.participations.map(participation => ({\r\n          name: participation.year.toString(),\r\n          value: participation.medalsCount\r\n        }))\r\n      }];\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n","<div *ngIf=\"chartData[0]\">\r\n<p>Number of entrie {{numberOfEntries}}</p>\r\n<p>total number medal {{totalMedalsCount}} </p>\r\n<p>total number of athlete {{totalAthleteCount}} </p>\r\n\r\n\r\n  <button routerLink=\"\"> Go Back</button>\r\n<ngx-charts-line-chart\r\n  [view]=\"[700, 300]\"\r\n  [legend]=\"legend\"\r\n  [showXAxisLabel]=\"showXAxisLabel\"\r\n  [showYAxisLabel]=\"showYAxisLabel\"\r\n  [xAxis]=\"xAxis\"\r\n  [yAxis]=\"yAxis\"\r\n  [xAxisLabel]=\"xAxisLabel\"\r\n  [yAxisLabel]=\"yAxisLabel\"\r\n  [timeline]=\"timeline\"\r\n  [results]=\"chartData\"\r\n  >\r\n</ngx-charts-line-chart>\r\n\r\n</div>"],"mappings":";;;;;;;;ICAAA,EAAA,CAAAC,cAAA,UAA0B;IACvBD,EAAA,CAAAE,MAAA,GAAoC;IAAAF,EAAA,CAAAG,YAAA,EAAI;IAC3CH,EAAA,CAAAC,cAAA,QAAG;IAAAD,EAAA,CAAAE,MAAA,GAAwC;IAAAF,EAAA,CAAAG,YAAA,EAAI;IAC/CH,EAAA,CAAAC,cAAA,QAAG;IAAAD,EAAA,CAAAE,MAAA,GAA8C;IAAAF,EAAA,CAAAG,YAAA,EAAI;IAGnDH,EAAA,CAAAC,cAAA,gBAAsB;IAACD,EAAA,CAAAE,MAAA,eAAO;IAAAF,EAAA,CAAAG,YAAA,EAAS;IACzCH,EAAA,CAAAI,SAAA,+BAYwB;IAExBJ,EAAA,CAAAG,YAAA,EAAM;;;;IApBHH,EAAA,CAAAK,SAAA,GAAoC;IAApCL,EAAA,CAAAM,kBAAA,sBAAAC,MAAA,CAAAC,eAAA,KAAoC;IACpCR,EAAA,CAAAK,SAAA,GAAwC;IAAxCL,EAAA,CAAAM,kBAAA,wBAAAC,MAAA,CAAAE,gBAAA,MAAwC;IACxCT,EAAA,CAAAK,SAAA,GAA8C;IAA9CL,EAAA,CAAAM,kBAAA,6BAAAC,MAAA,CAAAG,iBAAA,MAA8C;IAK/CV,EAAA,CAAAK,SAAA,GAAmB;IAAnBL,EAAA,CAAAW,UAAA,SAAAX,EAAA,CAAAY,eAAA,KAAAC,GAAA,EAAmB,WAAAN,MAAA,CAAAO,MAAA,oBAAAP,MAAA,CAAAQ,cAAA,oBAAAR,MAAA,CAAAS,cAAA,WAAAT,MAAA,CAAAU,KAAA,WAAAV,MAAA,CAAAW,KAAA,gBAAAX,MAAA,CAAAY,UAAA,gBAAAZ,MAAA,CAAAa,UAAA,cAAAb,MAAA,CAAAc,QAAA,aAAAd,MAAA,CAAAe,SAAA;;;ADMrB,OAAM,MAAOC,gBAAgB;EAS3BC,YAAoBC,KAAqB,EACrBC,cAA8B,EAC9BC,MAAc;IAFd,KAAAF,KAAK,GAALA,KAAK;IACL,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,MAAM,GAANA,MAAM;IARnB,KAAAL,SAAS,GAAqC,EAAE;IAGhD,KAAAb,gBAAgB,GAAW,CAAC,CAAC,CAAC;IAC9B,KAAAC,iBAAiB,GAAW,CAAC,CAAC,CAAC;IAOtC;IACA,KAAAI,MAAM,GAAY,IAAI;IACtB,KAAAc,UAAU,GAAY,IAAI;IAC1B,KAAAC,UAAU,GAAY,IAAI;IAC1B,KAAAZ,KAAK,GAAY,IAAI;IACrB,KAAAC,KAAK,GAAY,IAAI;IACrB,KAAAF,cAAc,GAAY,IAAI;IAC9B,KAAAD,cAAc,GAAY,IAAI;IAC9B,KAAAI,UAAU,GAAW,MAAM;IAC3B,KAAAC,UAAU,GAAW,YAAY;IACjC,KAAAC,QAAQ,GAAY,IAAI;IACxB,KAAAS,WAAW,GAAG;MACZC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;KAC1E;EAhBoC;EAkBrCC,QAAQA,CAAA;IAEN;IACA,MAAMC,YAAY,GAAG,IAAI,CAACR,KAAK,CAACS,QAAQ,CAACC,MAAM,CAAC,SAAS,CAAC;IAC1D;IAKA;IACA;;;;;;;;;;;;IAYF;IAEE,IAAI,CAACT,cAAc,CAACU,gBAAgB,CAACH,YAAY,CAAC,CAACI,SAAS,CAACC,IAAI,IAAG;MAClE,IAAI,CAACC,WAAW,GAAGD,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5B,IAAI,CAAC9B,eAAe,GAAG,IAAI,CAAC+B,WAAW,CAACC,cAAc,CAACC,MAAM;MAE7D;MACA,IAAI,CAAChC,gBAAgB,GAAG,IAAI,CAAC8B,WAAW,CAACC,cAAc,CAACE,MAAM,CAAC,CAACC,KAAK,EAAEC,aAAa,KAAKD,KAAK,GAAGC,aAAa,CAACC,WAAW,EAAE,CAAC,CAAC;MAC9H,IAAI,CAACnC,iBAAiB,GAAG,IAAI,CAAC6B,WAAW,CAACC,cAAc,CAACE,MAAM,CAAC,CAACC,KAAK,EAAEC,aAAa,KAAKD,KAAK,GAAGC,aAAa,CAACE,YAAY,EAAE,CAAC,CAAC;MAEhI;MACA,IAAI,CAACxB,SAAS,GAAG,CAAC;QAChByB,IAAI,EAAEd,YAAY;QAClBe,MAAM,EAAE,IAAI,CAACT,WAAW,CAACC,cAAc,CAACS,GAAG,CAACL,aAAa,KAAK;UAC5DG,IAAI,EAAEH,aAAa,CAACM,IAAI,CAACC,QAAQ,EAAE;UACnCC,KAAK,EAAER,aAAa,CAACC;SACtB,CAAC;OACH,CAAC;IACJ,CAAC,CAAC;EACJ;EAAC,QAAAQ,CAAA,G;qBAtEU9B,gBAAgB,EAAAvB,EAAA,CAAAsD,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAxD,EAAA,CAAAsD,iBAAA,CAAAG,EAAA,CAAAC,cAAA,GAAA1D,EAAA,CAAAsD,iBAAA,CAAAC,EAAA,CAAAI,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAhBrC,gBAAgB;IAAAsC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCd7BnE,EAAA,CAAAqE,UAAA,IAAAC,+BAAA,mBAqBM;;;QArBAtE,EAAA,CAAAW,UAAA,SAAAyD,GAAA,CAAA9C,SAAA,IAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}