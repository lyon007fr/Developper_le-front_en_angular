{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CountryComponent = class CountryComponent {\n  constructor(route, olympicService, router) {\n    this.route = route;\n    this.olympicService = olympicService;\n    this.router = router;\n    this.chartData = []; //propriéét qui va enregistré les données pour le graphique\n    this.totalMedalsCount = 0; // Propriété pour stocker le nombre total de médailles\n    this.totalAthleteCount = 0; // Propriété pour stocker le nombre total d'athlètes\n    this.countryLabel = '';\n    //chartConf\n    this.legend = true;\n    this.showLabels = true;\n    this.animations = true;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.showYAxisLabel = true;\n    this.showXAxisLabel = true;\n    this.xAxisLabel = 'Year';\n    this.yAxisLabel = 'Medal';\n    this.timeline = true;\n    this.colorScheme = {\n      domain: ['#5AA454', '#E44D25', '#CFC0BB', '#7aa3e5', '#a8385d', '#aae3f5']\n    };\n  }\n  ngOnInit() {\n    //recuperation de l'info dans l'url\n    this.countryLabel = this.route.snapshot.params['country'].charAt(0).toUpperCase() + this.route.snapshot.params['country'].slice(1);\n    this.olympicService.getDataByCountry(this.countryLabel).subscribe(data => {\n      this.countryInfo = data[0];\n      this.numberOfEntries = this.countryInfo.participations.length;\n      // calculer le nombre total de médailles et d'athlètes\n      this.totalMedalsCount = this.countryInfo.participations.reduce((total, participation) => total + participation.medalsCount, 0);\n      this.totalAthleteCount = this.countryInfo.participations.reduce((total, participation) => total + participation.athleteCount, 0);\n      // préparer les données pour le graphique\n      this.chartData = [{\n        name: this.countryLabel,\n        series: this.countryInfo.participations.map(participation => ({\n          name: participation.year.toString(),\n          value: participation.medalsCount\n        }))\n      }];\n    });\n  }\n};\nCountryComponent = __decorate([Component({\n  selector: 'app-country',\n  templateUrl: './country.component.html',\n  styleUrl: './country.component.scss'\n})], CountryComponent);\nexport { CountryComponent };","map":{"version":3,"names":["Component","CountryComponent","constructor","route","olympicService","router","chartData","totalMedalsCount","totalAthleteCount","countryLabel","legend","showLabels","animations","xAxis","yAxis","showYAxisLabel","showXAxisLabel","xAxisLabel","yAxisLabel","timeline","colorScheme","domain","ngOnInit","snapshot","params","charAt","toUpperCase","slice","getDataByCountry","subscribe","data","countryInfo","numberOfEntries","participations","length","reduce","total","participation","medalsCount","athleteCount","name","series","map","year","toString","value","__decorate","selector","templateUrl","styleUrl"],"sources":["C:\\Users\\MBD7C62N\\Repo Git\\python\\Developpez-le-front-end-en-utilisant-Angular\\src\\app\\country\\country.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, OutletContext, Router } from '@angular/router';\r\nimport { Olympic } from 'app/core/models/olympic';\r\nimport { OlympicService } from 'app/core/services/olympic.service';\r\nimport { Observable, filter, map, tap } from 'rxjs';\r\nimport { NgxChartsModule} from '@swimlane/ngx-charts';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n\r\n@Component({\r\n  selector: 'app-country',\r\n  templateUrl: './country.component.html',\r\n  styleUrl: './country.component.scss'\r\n})\r\nexport class CountryComponent implements OnInit{\r\n\r\n  public countryInfo!: Olympic | undefined ;//\r\n  public chartData: {\"name\":string, \"series\":{}[]}[] = [] ;//propriéét qui va enregistré les données pour le graphique\r\n  public numberOfEntries !: number; //propriété pour stocker le nom de JO auquel le pays a participé\r\n  public totalMedalsCount: number = 0; // Propriété pour stocker le nombre total de médailles\r\n  public totalAthleteCount: number = 0; // Propriété pour stocker le nombre total d'athlètes\r\n  public countryLabel: string = '';\r\n\r\n  constructor(private route: ActivatedRoute,\r\n              private olympicService: OlympicService,\r\n              private router: Router) {}\r\n\r\n\r\n  //chartConf\r\n  legend: boolean = true;\r\n  showLabels: boolean = true;\r\n  animations: boolean = true;\r\n  xAxis: boolean = true;\r\n  yAxis: boolean = true;\r\n  showYAxisLabel: boolean = true;\r\n  showXAxisLabel: boolean = true;\r\n  xAxisLabel: string = 'Year';\r\n  yAxisLabel: string = 'Medal';\r\n  timeline: boolean = true;\r\n  colorScheme = {\r\n    domain: ['#5AA454', '#E44D25', '#CFC0BB', '#7aa3e5', '#a8385d', '#aae3f5']\r\n  };\r\n\r\n  ngOnInit(): void {\r\n      \r\n    //recuperation de l'info dans l'url\r\n    this.countryLabel = this.route.snapshot.params['country'].charAt(0).toUpperCase() + this.route.snapshot.params['country'].slice(1)\r\n    this.olympicService.getDataByCountry(this.countryLabel).subscribe(data => {\r\n      this.countryInfo = data[0]; \r\n      this.numberOfEntries = this.countryInfo.participations.length;\r\n\r\n      // calculer le nombre total de médailles et d'athlètes\r\n      this.totalMedalsCount = this.countryInfo.participations.reduce((total, participation) => total + participation.medalsCount, 0);\r\n      this.totalAthleteCount = this.countryInfo.participations.reduce((total, participation) => total + participation.athleteCount, 0);\r\n\r\n      // préparer les données pour le graphique\r\n      this.chartData = [{\r\n        name: this.countryLabel,\r\n        series: this.countryInfo.participations.map(participation => ({\r\n          name: participation.year.toString(),\r\n          value: participation.medalsCount\r\n        }))\r\n      }];\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAc1C,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAS3BC,YAAoBC,KAAqB,EACrBC,cAA8B,EAC9BC,MAAc;IAFd,KAAAF,KAAK,GAALA,KAAK;IACL,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,MAAM,GAANA,MAAM;IARnB,KAAAC,SAAS,GAAqC,EAAE,CAAE;IAElD,KAAAC,gBAAgB,GAAW,CAAC,CAAC,CAAC;IAC9B,KAAAC,iBAAiB,GAAW,CAAC,CAAC,CAAC;IAC/B,KAAAC,YAAY,GAAW,EAAE;IAOhC;IACA,KAAAC,MAAM,GAAY,IAAI;IACtB,KAAAC,UAAU,GAAY,IAAI;IAC1B,KAAAC,UAAU,GAAY,IAAI;IAC1B,KAAAC,KAAK,GAAY,IAAI;IACrB,KAAAC,KAAK,GAAY,IAAI;IACrB,KAAAC,cAAc,GAAY,IAAI;IAC9B,KAAAC,cAAc,GAAY,IAAI;IAC9B,KAAAC,UAAU,GAAW,MAAM;IAC3B,KAAAC,UAAU,GAAW,OAAO;IAC5B,KAAAC,QAAQ,GAAY,IAAI;IACxB,KAAAC,WAAW,GAAG;MACZC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;KAC1E;EAhBoC;EAkBrCC,QAAQA,CAAA;IAEN;IACA,IAAI,CAACb,YAAY,GAAG,IAAI,CAACN,KAAK,CAACoB,QAAQ,CAACC,MAAM,CAAC,SAAS,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAG,IAAI,CAACvB,KAAK,CAACoB,QAAQ,CAACC,MAAM,CAAC,SAAS,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC;IAClI,IAAI,CAACvB,cAAc,CAACwB,gBAAgB,CAAC,IAAI,CAACnB,YAAY,CAAC,CAACoB,SAAS,CAACC,IAAI,IAAG;MACvE,IAAI,CAACC,WAAW,GAAGD,IAAI,CAAC,CAAC,CAAC;MAC1B,IAAI,CAACE,eAAe,GAAG,IAAI,CAACD,WAAW,CAACE,cAAc,CAACC,MAAM;MAE7D;MACA,IAAI,CAAC3B,gBAAgB,GAAG,IAAI,CAACwB,WAAW,CAACE,cAAc,CAACE,MAAM,CAAC,CAACC,KAAK,EAAEC,aAAa,KAAKD,KAAK,GAAGC,aAAa,CAACC,WAAW,EAAE,CAAC,CAAC;MAC9H,IAAI,CAAC9B,iBAAiB,GAAG,IAAI,CAACuB,WAAW,CAACE,cAAc,CAACE,MAAM,CAAC,CAACC,KAAK,EAAEC,aAAa,KAAKD,KAAK,GAAGC,aAAa,CAACE,YAAY,EAAE,CAAC,CAAC;MAEhI;MACA,IAAI,CAACjC,SAAS,GAAG,CAAC;QAChBkC,IAAI,EAAE,IAAI,CAAC/B,YAAY;QACvBgC,MAAM,EAAE,IAAI,CAACV,WAAW,CAACE,cAAc,CAACS,GAAG,CAACL,aAAa,KAAK;UAC5DG,IAAI,EAAEH,aAAa,CAACM,IAAI,CAACC,QAAQ,EAAE;UACnCC,KAAK,EAAER,aAAa,CAACC;SACtB,CAAC;OACH,CAAC;IACJ,CAAC,CAAC;EACJ;CACD;AAnDYrC,gBAAgB,GAAA6C,UAAA,EAL5B9C,SAAS,CAAC;EACT+C,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,QAAQ,EAAE;CACX,CAAC,C,EACWhD,gBAAgB,CAmD5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}